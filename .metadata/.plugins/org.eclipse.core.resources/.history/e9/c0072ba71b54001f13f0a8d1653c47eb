package ControladorT.com.br.ControladordeTarefas.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.DefaultSecurityFilterChain;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.ObjectPostProcessor;
import org.springframework.security.config.annotation.SecurityBuilder;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	    @Bean
	    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	        http
	            .authorizeRequests()
	                .requestMatchers("/tarefas/**").authenticated() // Requer autenticação para /tarefas
	                .anyRequest().permitAll() // Permite acesso a todas as outras URLs sem autenticação
	            .and()
	            .formLogin() // Ativa o login baseado em formulário
	                .loginPage("/login") // Define a URL da página de login
	                .permitAll() // Permite acesso à página de login sem autenticação
	            .and()
	            .csrf().disable(); // Desabilita proteção CSRF (necessário para APIs REST)

	        return http.build();
	    }

	    @Bean
	    public DefaultSecurityFilterChain authenticationManager(HttpSecurity http) throws Exception {
	        return ((SecurityBuilder<DefaultSecurityFilterChain>) http.getSharedObject(AuthenticationManagerBuilder.class)
	                .inMemoryAuthentication()
	                .withUser("user")
	                .password("{noop}password")
	                .roles("USER")
	                .and()
	                .withUser("admin")
	                .password("{noop}admin")
	                .roles("ADMIN")
	                .and())
	                .build();
	    }
	}

